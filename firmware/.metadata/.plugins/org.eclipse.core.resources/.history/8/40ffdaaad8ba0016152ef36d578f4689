
/* Name: main.c
 * Project: AVR Pulse Generator
 *              for ATtiny2313
 * Author: Rada Berar
 * Creation Date: 30.11.2016.
 *
 * commands:
 * 00 <4 byte duration in 0,1us>	set pause length
 * 01 <4 byte duration in 0,1us>	set pulse length
 * 02								store settings to EEPROM and use at next startup
 *
 */

#include <string.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/pgmspace.h>
#include <avr/wdt.h>
#include <stdint.h>
#include <stdbool.h>
#include <avr/eeprom.h>
#include <util/delay.h>

#define nop() 			do{ __asm__ __volatile__ ("nop"); } while (0)

#define TMR0_MAX_COUNT		(250)
#define MIN_COUNT_MODE_LEN	(50)

#define USART_BAUDRATE 	(9600)
#define BAUD_PRESCALE 	(((( F_CPU / 16) + ( USART_BAUDRATE / 2) ) / ( USART_BAUDRATE ) ) - 1)
#define waitTxReady()	while (( UCSRA & (1 << UDRE ) ) == 0)
#define RX_SIZE 		(6)
#define CMD_SET_LEN		(5)
#define CMD_STORE_LEN	(1)
#define MAX_LEN			(0xFFFFFFFF >> 2)

#define OUT_SET()		do{ PORTB = 0xFF; }while(0)
#define OUT_CLR()		do{ PORTB = 0; }while(0)
#define OUT_TGL()		do{ PINB = 0xFF; }while(0)

#define TMR_START()	do{ TCCR0B = (1 << CS00); }while(0) /* Start timer0 with no prescaller */
#define TMR_STOP()		do{ TCCR0B = 0; }while(0)
#define TMR_SET_INT()	do{ TIMSK |= (1 << OCIE0A); }while(0)
#define TMR_CLR_INT()	do{ TIMSK &= ~(1 << OCIE0A); }while(0)

enum{
	CMD_SET_PAUSE = 0,
	CMD_SET_PULSE = 1,
	CMD_STORE = 2, 		/* Save in EEPROM */
	CMD_UNKNOWN
};


uint32_t EEMEM storePauseLen;
uint32_t EEMEM storePulseLen;

volatile uint8_t rx_buf[RX_SIZE];
volatile uint8_t rx_index;
volatile uint32_t pauseLen;	/* pause duration in us */
volatile uint32_t pulseLen; /* pulse duration in us */
volatile bool modeContinueFlag;
volatile uint32_t tmr0CycleCount;


static void check_command( void ){

	uint8_t command = rx_buf[0];

	if(command >= CMD_UNKNOWN){
		rx_index = 0;
	}else
		if((rx_index == CMD_STORE_LEN) && (command == CMD_STORE)){

		eeprom_write_dword(&storePauseLen, pauseLen);
		eeprom_write_dword(&storePulseLen, pulseLen);
		rx_index = 0;

	}else if(rx_index == CMD_SET_LEN){

		uint32_t value = ((uint32_t)rx_buf[1] << 24) + ((uint32_t)rx_buf[2] << 16) + ((uint32_t)rx_buf[3] << 8) + rx_buf[4];
		if(value > MAX_LEN){
			value = MAX_LEN;
		}

		if(command == CMD_SET_PAUSE){
			pauseLen = value;
			modeContinueFlag = false;
			tmr0CycleCount = 0xFFFFFFFE;
		}else if(command == CMD_SET_PULSE){
			pulseLen = value;
			modeContinueFlag = false;
			tmr0CycleCount = 0xFFFFFFFE;
		}

		rx_index = 0;
	}
}


ISR(USART_RX_vect) {

	rx_buf[rx_index] = UDR;

	if(rx_index < RX_SIZE){
		rx_index++;
	}

	check_command();
}


static void init(void)
{
	ACSR |= 1 << ACD; /* Disable analog comparer to reduce power consumption */

	DDRB = 0xff;
	PORTB = 0;

	/* UART init */
	// set the baud rate
	UBRRL = (unsigned char)BAUD_PRESCALE;
	UBRRH = (BAUD_PRESCALE >> 8);
	// enable rx
	UCSRB = (1<<RXEN);
	//  enable RX interrupt
	UCSRB |= (1 << RXCIE);

	rx_index = 0;

	pauseLen = eeprom_read_dword(&storePauseLen);
	pulseLen = eeprom_read_dword(&storePulseLen);


	sei();
}

#define TGL_01us()		while(modeContinueFlag){		\
			OUT_TGL(); OUT_TGL(); OUT_TGL();	\
			OUT_TGL(); OUT_TGL(); OUT_TGL();	\
			OUT_TGL(); OUT_TGL(); OUT_TGL();	\
			OUT_TGL(); OUT_TGL(); OUT_TGL();	\
			OUT_TGL(); OUT_TGL(); OUT_TGL();	\
			OUT_TGL(); OUT_TGL(); OUT_TGL();	\
			OUT_TGL(); OUT_TGL(); OUT_TGL();	\
			OUT_TGL(); OUT_TGL(); OUT_TGL();	\
			OUT_TGL(); OUT_TGL(); OUT_TGL();	\
			OUT_TGL(); OUT_TGL(); OUT_TGL();	\
			OUT_TGL(); OUT_TGL(); OUT_TGL();	\
			OUT_TGL(); OUT_TGL(); OUT_TGL();	\
			OUT_TGL(); OUT_TGL(); OUT_TGL();	\
			OUT_TGL(); OUT_TGL(); OUT_TGL();	\
			OUT_TGL(); OUT_TGL(); OUT_TGL();	\
			OUT_TGL(); OUT_TGL(); OUT_TGL();	\
			OUT_TGL(); OUT_TGL(); OUT_TGL();	\
			OUT_TGL(); OUT_TGL(); OUT_TGL();	\
			OUT_TGL(); OUT_TGL(); OUT_TGL();	\
			OUT_TGL(); OUT_TGL(); OUT_TGL();	\
			OUT_TGL(); OUT_TGL(); OUT_TGL();	}

#define TGL_02us()		while(modeContinueFlag){			\
			OUT_TGL();	nop();	OUT_TGL(); nop();	\
			OUT_TGL();	nop();	OUT_TGL(); nop();	\
			OUT_TGL();	nop();	OUT_TGL(); nop();	\
			OUT_TGL();	nop();	OUT_TGL(); nop();	\
			OUT_TGL();	nop();	OUT_TGL(); nop();	\
			OUT_TGL();	nop();	OUT_TGL(); nop();	\
			OUT_TGL();	nop();	OUT_TGL(); nop();	\
			OUT_TGL();	nop();	OUT_TGL(); nop();	\
			OUT_TGL();	nop();	OUT_TGL(); nop();	\
			OUT_TGL();	nop();	OUT_TGL(); nop();	\
			OUT_TGL();	nop();	OUT_TGL(); nop();	\
			OUT_TGL();	nop();	OUT_TGL(); nop();	\
			OUT_TGL();	nop();	OUT_TGL(); nop();	\
			OUT_TGL();	}

#define TGL_04us()		while(modeContinueFlag){			\
			OUT_TGL();	nop();	nop();	nop();		\
			OUT_TGL();	nop();	nop();	nop();		\
			OUT_TGL();	nop();	nop();	nop();		\
			OUT_TGL();	nop();	nop();	nop();		\
			OUT_TGL();	nop();	nop();	nop();		\
			OUT_TGL();	nop();	nop();	nop();		\
			OUT_TGL();	nop();	nop();	nop();		\
			OUT_TGL();	nop();	nop();	nop();		\
			OUT_TGL();	nop();	nop();	nop();		\
			OUT_TGL();	nop();	nop();	nop();		\
			OUT_TGL();	}

#define TGL_06us()		while(modeContinueFlag){					\
			OUT_TGL(); nop(); nop(); nop();	nop();	nop();	\
			OUT_TGL(); nop(); nop(); nop();	nop();	nop();	\
			OUT_TGL(); nop(); nop(); nop();	nop();	nop();	\
			OUT_TGL(); nop(); nop(); nop();	nop();	nop();	\
			OUT_TGL(); nop(); nop(); nop();	nop();	nop();	\
			OUT_TGL();}

#define TGL_08us()		while(modeContinueFlag){ OUT_TGL(); nop();	}

#define TGL_1us()		while(modeContinueFlag){	\
			OUT_TGL(); nop(); nop(); nop();	}

#define TGL_12us()		while(modeContinueFlag){		\
			OUT_TGL(); nop(); nop();			\
			nop(); nop(); nop(); }

#define TGL_14us()		while(modeContinueFlag){		\
			OUT_TGL(); nop(); nop();			\
			nop(); nop(); nop(); nop();	nop();}

#define TGL_16us()		while(modeContinueFlag){		\
			OUT_TGL(); nop(); nop(); nop();		\
			nop(); nop(); nop(); nop(); nop(); nop();}

#define TGL_18us()		while(modeContinueFlag){		\
			OUT_TGL(); nop(); nop(); nop();		\
			nop(); nop(); nop(); nop();	nop();	\
			nop(); nop(); nop();	}

#define TGL_20us()		while(modeContinueFlag){		\
			OUT_TGL(); nop(); nop(); nop();		\
			nop(); nop(); nop(); nop();	nop();	\
			nop(); nop(); nop(); nop();	nop(); }

void doToggle( void ){
	TMR_STOP();

	modeContinueFlag = true;

	uint8_t period = (uint8_t)(pauseLen + pulseLen)>>1;

	switch(period){
	case 0:
		TGL_01us();
		break;
	case 1:
		TGL_02us();
		break;
	case 2:
		TGL_04us();
		break;
	case 3:
		TGL_06us();
		break;
	case 4:
		TGL_08us();
		break;
	case 5:
		TGL_1us();
		break;
	case 6:
		TGL_12us();
		break;
	case 7:
		TGL_14us();
		break;
	default:
		TGL_16us();
		break;
	}

}


ISR (TIMER0_COMPA_vect)
{
	tmr0CycleCount++;
}


void doCounting( void ){
	OCR0A  = TMR0_MAX_COUNT - 1;// number to count up to.
	TCCR0A = (1 << WGM01); 		// CTC mode


	modeContinueFlag = true;
	TMR_SET_INT();
	tmr0CycleCount = 0;

	uint32_t tempPauseLen = pauseLen * 2;
	uint32_t tempPulseLen = pulseLen * 2;
	uint32_t tmrLowCycleCount, tmrHighCycleCount;
	uint8_t tmrLowRemanant, tmrHighRemanant;

	tmrLowCycleCount = tempPauseLen / (uint32_t)TMR0_MAX_COUNT;
	tmrHighCycleCount = tempPulseLen / (uint32_t)TMR0_MAX_COUNT;
	tmrLowRemanant = (uint8_t)(tempPauseLen % TMR0_MAX_COUNT);
	tmrHighRemanant = (uint8_t)(tempPulseLen % TMR0_MAX_COUNT);

	if((tmrLowCycleCount == 0) && (tmrHighCycleCount == 0)){

		if(tempPauseLen > 18){
			tempPauseLen -= 18;
		}

		if(tempPulseLen > 11){
			tempPulseLen -= 11;
		}

		TMR_CLR_INT();
		TMR_START();

		while(modeContinueFlag){
			while(TCNT0 < tempPauseLen);
			OUT_SET();
			TCNT0 = 0;
			while(TCNT0 < tempPulseLen);
			OUT_CLR();
			TCNT0 = 0;
		}

	}else if(tmrLowCycleCount == 0){

		if(tempPauseLen > 20){
			tempPauseLen -= 20;
		}

		if(tempPulseLen > 68){
			tempPulseLen -= 68;
		}

		TMR_START();

		while(modeContinueFlag){
			while(TCNT0 < tempPauseLen);
			OUT_SET();
			TCNT0 = 0;
			tmr0CycleCount = 0;
			while(tmr0CycleCount < tmrHighCycleCount);
			while(TCNT0 < tmrHighRemanant);
			OUT_CLR();
			TCNT0 = 0;
		}
	}else if(tmrHighCycleCount == 0){
		if(tempPulseLen > 20){
			tempPulseLen -= 20;
		}

		if(tempPauseLen > 68){
			tempPauseLen -= 68;
		}

		TMR_START();

		while(modeContinueFlag){
			while(TCNT0 < tempPulseLen);
			OUT_CLR();
			TCNT0 = 0;
			tmr0CycleCount = 0;
			while(tmr0CycleCount < tmrLowCycleCount);
			while(TCNT0 < tmrLowRemanant);
			OUT_SET();
			TCNT0 = 0;
		}
	}else{

		if(tempPulseLen > 44){
			tempPulseLen -= 44;
		}

		if(tempPauseLen > 44){
			tempPauseLen -= 44;
		}

		TMR_START();

		while(modeContinueFlag){
			while(tmr0CycleCount < tmrLowCycleCount);
			while(TCNT0 < tmrLowRemanant);
			OUT_SET();
			TCNT0 = 0;
			tmr0CycleCount = 0;
			while(tmr0CycleCount < tmrHighCycleCount);
			while(TCNT0 < tmrHighRemanant);
			OUT_CLR();
			TCNT0 = 0;
			tmr0CycleCount = 0;
		}
	}

	TMR_STOP();

}


int main(void)
{
	init();

	while(1){
		doCounting();
	}

    for(;;){    /* main event loop */
    	if((pauseLen < 19) && (pulseLen < 19) && ((pauseLen + pulseLen) < 19)){
    		/* PWM mode */
    		doToggle();
    	}else{
    		/* count mode */
    		doCounting();
    	}
    }
    return 0;
}

