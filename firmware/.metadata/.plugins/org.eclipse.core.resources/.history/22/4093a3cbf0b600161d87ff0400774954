
/* Name: main.c
 * Project: AVR Pulse Generator
 *              for ATtiny2313
 * Author: Rada Berar
 * Creation Date: 30.11.2016.
 *
 */

#include <string.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/pgmspace.h>
#include <avr/wdt.h>
#include <stdint.h>
#include <stdbool.h>
#include <avr/eeprom.h>
#include <util/delay.h>

#define USART_BAUDRATE 	(9600)
#define BAUD_PRESCALE 	(((( F_CPU / 16) + ( USART_BAUDRATE / 2) ) / ( USART_BAUDRATE ) ) - 1)
#define waitTxReady()	while (( UCSRA & (1 << UDRE ) ) == 0)
#define RX_SIZE 		(6)

#define CMD_SET_LEN		(5)
#define CMD_STORE_LEN	(1)

enum{
	CMD_SET_PAUSE = 0,
	CMD_SET_PULSE = 1,
	CMD_STORE = 2, 		/* Save in EEPROM */
	CMD_UNKNOWN
};

volatile uint8_t rx_buf[RX_SIZE];
volatile uint8_t rx_index;
volatile uint32_t pauseLen = 1;	/* pause duration in us */
volatile uint32_t pulseLen = 1; /* pulse duration in us */

void check_command(){
	uint8_t comand = rx_buf[0];

	if(rx_index == CMD_STORE_LEN){

	}else if(rx_index == CMD_SET_LEN){
		if(comand == CMD_SET_PAUSE){

		}else if(comand == CMD_SET_PULSE){

		}

		rx_index = 0;

	}

}


ISR(USART_RX_vect) {

	rx_buf[rx_index] = UDR;

	if(rx_index < RX_SIZE){
		rx_index++;
	}

	check_command();
}

static void uart_init(void)
{

	DDRD = 2; // set TX pin as output

	// lets set the baud rate
	UBRRL = (unsigned char)BAUD_PRESCALE;
	UBRRH = (BAUD_PRESCALE >> 8);

	// enable rx
	UCSRB = (1<<RXEN);

	//  enable RX interrupt
	UCSRB |= (1 << RXCIE);

	rx_index = 0;
}


static void hardwareInit(void)
{
	ACSR |= 1 << ACD; /* Disable analog comparer to reduce power consumption */

	DDRB = 0xff;
	PORTB = 0xff;

	uart_init();
}


int main(void)
{
    hardwareInit();
    sei();
    for(;;){    /* main event loop */
        wdt_reset();




    }
    return 0;
}

