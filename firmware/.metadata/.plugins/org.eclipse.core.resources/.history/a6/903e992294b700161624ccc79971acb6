
/* Name: main.c
 * Project: AVR Pulse Generator
 *              for ATtiny2313
 * Author: Rada Berar
 * Creation Date: 30.11.2016.
 *
 */

#include <string.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/pgmspace.h>
#include <avr/wdt.h>
#include <stdint.h>
#include <stdbool.h>
#include <avr/eeprom.h>
#include <util/delay.h>

#define TMR_RESOLUTION	(250)
#define MIN_MODE_SWITCH_COUNT	(60)

#define USART_BAUDRATE 	(9600)
#define BAUD_PRESCALE 	(((( F_CPU / 16) + ( USART_BAUDRATE / 2) ) / ( USART_BAUDRATE ) ) - 1)
#define waitTxReady()	while (( UCSRA & (1 << UDRE ) ) == 0)
#define RX_SIZE 		(6)

#define CMD_SET_LEN		(5)
#define CMD_STORE_LEN	(1)
#define OUT_VALUE		(0xFF)

enum{
	CMD_SET_PAUSE = 0,
	CMD_SET_PULSE = 1,
	CMD_STORE = 2, 		/* Save in EEPROM */
	CMD_UNKNOWN
};


uint32_t EEMEM storePauseLen = 1;
uint32_t EEMEM storePulseLen = 1;

volatile uint8_t rx_buf[RX_SIZE];
volatile uint8_t rx_index;
volatile uint32_t pauseLen;	/* pause duration in us */
volatile uint32_t pulseLen; /* pulse duration in us */
volatile uint32_t tmrCounter;
volatile bool modeChanged = false;



static void check_command( void ){

	uint8_t command = rx_buf[0];

	if((rx_index == CMD_STORE_LEN) && (command == CMD_STORE)){

		eeprom_write_dword(&storePauseLen, pauseLen);
		eeprom_write_dword(&storePulseLen, pulseLen);
		rx_index = 0;

	}else if(rx_index == CMD_SET_LEN){

		uint32_t value = ((uint32_t)rx_buf[1] << 24) | ((uint32_t)rx_buf[2] << 16) | ((uint32_t)rx_buf[3] << 8) | rx_buf[4];

		if(value > 0){
			value -= 1;
		}

		if(command == CMD_SET_PAUSE){
			pauseLen = value;
		}else if(command == CMD_SET_PULSE){
			pulseLen = value;
		}

		rx_index = 0;
	}
}


ISR(USART_RX_vect) {

	rx_buf[rx_index] = UDR;

	if(rx_index < RX_SIZE){
		rx_index++;
	}

	check_command();
}

ISR(TIMER0_COMPA_vect)
{
	tmrCounter += TMR_RESOLUTION;
}


static void init(void)
{
	ACSR |= 1 << ACD; /* Disable analog comparer to reduce power consumption */

	DDRB = 0xff;
	PORTB = 0;

	/* UART init */
	// set the baud rate
	UBRRL = (unsigned char)BAUD_PRESCALE;
	UBRRH = (BAUD_PRESCALE >> 8);
	// enable rx
	UCSRB = (1<<RXEN);
	//  enable RX interrupt
	UCSRB |= (1 << RXCIE);

	/* timer_init */
	OCR0A  = TMR_RESOLUTION;      			// number to count up to.
	TCCR0A |= (1 << WGM01); 				// Clear Timer on Compare Match (CTC) mode
	TCCR0B = (1<<CS00);   	 				// no prescaling
	TIMSK |= (1 << OCIE0A);					// Set interrupt on compare match

	rx_index = 0;
	pauseLen = eeprom_read_dword(&storePauseLen);
	pulseLen = eeprom_read_dword(&storePulseLen);

	if(pauseLen == 0xFFFFFFFF){
		pauseLen = 3;
	}

	if(pulseLen == 0xFFFFFFFF){
		pulseLen = 3;
	}

	TCNT0 = 0;
	tmrCounter = 0;

	sei();
}


int main(void)
{
	init();

    for(;;){    /* main event loop */
//        wdt_reset();

    	if(PORTB == 0){
    		PORTB = OUT_VALUE;
			if(pulseLen < TMR_RESOLUTION){
				TCNT0 = 0;
				while(TCNT0 < pulseLen);
				TCNT0 = 0;
			}else{
				while((tmrCounter + TCNT0) < pulseLen);
				tmrCounter = 0;
			}

    	}else{
    		PORTB = 0;
			if(pauseLen < TMR_RESOLUTION){
				TCNT0 = 0;
				while(TCNT0 < pauseLen);
				TCNT0 = 0;
			}else{
				while((tmrCounter + TCNT0) < pauseLen);
				tmrCounter = 0;
			}
		}
    }
    return 0;
}

